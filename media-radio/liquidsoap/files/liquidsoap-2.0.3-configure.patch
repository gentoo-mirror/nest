--- ../configure.ac	2022-03-02 20:00:12.000000000 +0200
+++ ../configure.ac	2022-03-21 00:00:04.974306031 +0200
@@ -349,7 +349,14 @@
 # Graphics
 #
 
-AC_CHECK_OCAML_BINDING([graphics])
+AC_ARG_ENABLE([graphics],
+   AS_HELP_STRING([--disable-graphics],[don't use graphics]))
+if test "x$enable_graphics" = "xno" ; then
+   w_GRAPHICS=""
+   w_GRAPHICS="no"
+else
+    AC_CHECK_OCAML_BINDING([graphics])
+fi
 
 #
 # Bytes
@@ -396,13 +403,27 @@
 # Memtrace
 #
 
-AC_CHECK_OCAML_BINDING([memtrace])
+AC_ARG_ENABLE([memtrace],
+   AS_HELP_STRING([--disable-memtrace],[don't use memtrace]))
+if test "x$enable_memtrace" = "xno" ; then
+   W_MEMTRACE=""
+   w_MEMTRACE="no"
+else
+    AC_CHECK_OCAML_BINDING([memtrace])
+fi
 
 #
 # Mem_usage
 #
 
-AC_CHECK_OCAML_BINDING([mem_usage])
+AC_ARG_ENABLE([mem_usage],
+   AS_HELP_STRING([--disable-mem)usage],[don't use mem_usage]))
+if test "x$enable_mem_usage" = "xno" ; then
+   W_MEM_USAGE=""
+   w_MEM_USAGE="no"
+else
+    AC_CHECK_OCAML_BINDING([mem_usage])
+fi
 
 #
 # Dtools
@@ -420,7 +441,14 @@
 # Cry
 #
 
-AC_CHECK_OCAML_BINDING([cry])
+AC_ARG_ENABLE([cry],
+   AS_HELP_STRING([--disable-cry],[don't use cry]))
+if test "x$enable_cry" = "xno" ; then
+   W_CRY=""
+   w_CRY="no"
+else
+    AC_CHECK_OCAML_BINDING([cry])
+fi
 
 # ocaml-mm
 #
@@ -431,59 +459,123 @@
 # xmlplaylist
 #
 
-AC_CHECK_OCAML_BINDING([xmlplaylist])
+AC_ARG_ENABLE([xmlplaylist],
+   AS_HELP_STRING([--disable-xmlplaylist],[don't use xmlplaylist]))
+if test "x$enable_xmlplaylist" = "xno" ; then
+   W_XMLPLAYLIST=""
+   w_XMLPLAYLIST="no"
+else
+    AC_CHECK_OCAML_BINDING([xmlplaylist])
+fi
 
 #
 # Lastfm
 #
 
-AC_CHECK_OCAML_BINDING([lastfm],[xmlplaylist curl])
+AC_ARG_ENABLE([lastfm],
+   AS_HELP_STRING([--disable-lastfm],[don't use lastfm]))
+if test "x$enable_lastfm" = "xno" ; then
+   W_LASTFM=""
+   w_LASTFM="no"
+else
+    AC_CHECK_OCAML_BINDING([lastfm],[xmlplaylist curl])
+fi
 
 #
 # Ogg
 #
 
-AC_CHECK_OCAML_BINDING([ogg])
-AC_CHECK_OCAML_BINDING([ogg.decoder],[ogg])
+AC_ARG_ENABLE([ogg],
+   AS_HELP_STRING([--disable-ogg],[don't use ogg]))
+if test "x$enable_ogg" = "xno" ; then
+   W_OGG=""
+   w_OGG="no"
+else
+    AC_CHECK_OCAML_BINDING([ogg])
+    AC_CHECK_OCAML_BINDING([ogg.decoder],[ogg])
+fi
 
 #
 # Vorbis
 #
 
-AC_CHECK_OCAML_BINDING([vorbis],[ogg])
-AC_CHECK_OCAML_BINDING([vorbis.decoder],[vorbis])
+AC_ARG_ENABLE([vorbis],
+   AS_HELP_STRING([--disable-vorbis],[don't use vorbis]))
+if test "x$enable_vorbis" = "xno" ; then
+   W_VORBIS=""
+   w_VORBIS="no"
+else
+    AC_CHECK_OCAML_BINDING([vorbis],[ogg])
+    AC_CHECK_OCAML_BINDING([vorbis.decoder],[vorbis])
+fi
 
 #
 # Opus
 #
 
-AC_CHECK_OCAML_BINDING([opus],[ogg])
-AC_CHECK_OCAML_BINDING([opus.decoder],[opus])
+AC_ARG_ENABLE([opus],
+   AS_HELP_STRING([--disable-opus],[don't use opus]))
+if test "x$enable_opus" = "xno" ; then
+   W_OPUS=""
+   w_OPUS="no"
+else
+    AC_CHECK_OCAML_BINDING([opus],[ogg])
+    AC_CHECK_OCAML_BINDING([opus.decoder],[opus])
+fi
 
 #
 # Speex
 #
 
-AC_CHECK_OCAML_BINDING([speex],[ogg])
-AC_CHECK_OCAML_BINDING([speex.decoder],[speex])
+AC_ARG_ENABLE([speex],
+   AS_HELP_STRING([--disable-speex],[don't use speex]))
+if test "x$enable_speex" = "xno" ; then
+   W_SPEEX=""
+   w_SPEEX="no"
+else
+    AC_CHECK_OCAML_BINDING([speex],[ogg])
+    AC_CHECK_OCAML_BINDING([speex.decoder],[speex])
+fi
 
 #
 # Mad
 #
 
-AC_CHECK_OCAML_BINDING([mad])
+AC_ARG_ENABLE([mad],
+   AS_HELP_STRING([--disable-mad],[don't use mad]))
+if test "x$enable_mad" = "xno" ; then
+   W_MAD=""
+   w_MAD="no"
+else
+    AC_CHECK_OCAML_BINDING([mad])
+fi
 
 #
 # Flac
 #
 
-AC_CHECK_OCAML_BINDING([flac])
-# Small hack..
-if test -z "${with_flac_ogg_dir}"; then
-  with_flac_ogg_dir=${with_flac_dir}
+AC_ARG_ENABLE([flac],
+   AS_HELP_STRING([--disable-flac],[don't use flac]))
+if test "x$enable_flac" = "xno" ; then
+   W_FLAC=""
+   w_FLAC="no"
+else
+    AC_CHECK_OCAML_BINDING([flac])
+fi
+
+AC_ARG_ENABLE([flac-ogg],
+   AS_HELP_STRING([--disable-flac-ogg],[don't use flac-ogg]))
+if test "x$enable_flac-ogg" = "xno" ; then
+   W_FLAC_OGG=""
+   w_FLAC_OGG="no"
+else
+    AC_CHECK_OCAML_BINDING([flac.ogg],[ogg flac],[],[],[flac])
+    AC_CHECK_OCAML_BINDING([flac.decoder],[flac.ogg])
+    # Small hack..
+    if test -z "${with_flac_ogg_dir}"; then
+      with_flac_ogg_dir=${with_flac_dir}
+    fi
 fi
-AC_CHECK_OCAML_BINDING([flac.ogg],[ogg flac],[],[],[flac])
-AC_CHECK_OCAML_BINDING([flac.decoder],[flac.ogg])
 
 #
 # Dynlink
@@ -529,7 +621,15 @@
 # Lame
 #
 
-AC_CHECK_OCAML_BINDING([lame])
+AC_ARG_ENABLE([lame],
+   AS_HELP_STRING([--disable-lame],[don't use lame]))
+if test "x$enable_lame" = "xno" ; then
+   W_LAME=""
+   w_LAME="no"
+else
+    AC_CHECK_OCAML_BINDING([lame])
+fi
+
 if test -z "${W_LAME}"; then
   if test -n "${W_DYNLINK}"; then
     if test -n "${OCAML_HAS_FIRST_CLASS_MODULES}"; then
@@ -544,25 +644,54 @@
 # Shine
 #
 
-AC_CHECK_OCAML_BINDING([shine])
+AC_ARG_ENABLE([shine],
+   AS_HELP_STRING([--disable-shine],[don't use shine]))
+if test "x$enable_shine" = "xno" ; then
+   W_SHINE=""
+   w_SHINE="no"
+else
+    AC_CHECK_OCAML_BINDING([shine])
+fi
 
 #
 # Gstreamer
 #
 
-AC_CHECK_OCAML_BINDING([gstreamer])
+AC_ARG_ENABLE([gstreamer],
+   AS_HELP_STRING([--disable-gstreamer],[don't use gstreamer]))
+if test "x$enable_gstreamer" = "xno" ; then
+   W_GSTREAMER=""
+   w_GSTREAMER="no"
+else
+    AC_CHECK_OCAML_BINDING([gstreamer])
+fi
 
 #
 # frei0r
 #
 
-AC_CHECK_OCAML_BINDING([frei0r])
+AC_ARG_ENABLE([frei0r],
+   AS_HELP_STRING([--disable-frei0r],[don't use frei0r]))
+if test "x$enable_frei0r" = "xno" ; then
+   W_FREI0R=""
+   w_FREI0R="no"
+else
+    AC_CHECK_OCAML_BINDING([frei0r])
+fi
 
 #
 # Fdkaac
 #
 
-AC_CHECK_OCAML_BINDING([fdkaac])
+AC_ARG_ENABLE([fdkaac],
+   AS_HELP_STRING([--disable-fdkaac],[don't use fdkaac]))
+if test "x$enable_fdkaac" = "xno" ; then
+   W_FDKAAC=""
+   w_FDKAAC="no"
+else
+    AC_CHECK_OCAML_BINDING([fdkaac])
+fi
+
 if test -z "${W_FDKAAC}"; then
   if test -n "${W_DYNLINK}"; then
     if test -n "${OCAML_HAS_FIRST_CLASS_MODULES}"; then
@@ -577,44 +706,93 @@
 # Theora
 #
 
-AC_CHECK_OCAML_BINDING([theora],[ogg])
-AC_CHECK_OCAML_BINDING([theora.decoder],[theora])
+AC_ARG_ENABLE([theora],
+   AS_HELP_STRING([--disable-theora],[don't use theora]))
+if test "x$enable_theora" = "xno" ; then
+   W_THEORA=""
+   w_THEORA="no"
+else
+    AC_CHECK_OCAML_BINDING([theora],[ogg])
+    AC_CHECK_OCAML_BINDING([theora.decoder],[theora])
+fi
 
 #
 # FFMPEG
 #
 
-AC_CHECK_OCAML_BINDING([ffmpeg])
+AC_ARG_ENABLE([ffmpeg],
+   AS_HELP_STRING([--disable-ffmpeg],[don't use ffmpeg]))
+if test "x$enable_ffmpeg" = "xno" ; then
+   W_FFMPEG=""
+   w_FFMPEG="no"
+else
+    AC_CHECK_OCAML_BINDING([ffmpeg])
+fi
 
 #
 # Jack
 #
 
-AC_CHECK_OCAML_BINDING([bjack])
+AC_ARG_ENABLE([bjack],
+   AS_HELP_STRING([--disable-bjack],[don't use bjack]))
+if test "x$enable_bjack" = "xno" ; then
+   W_BJACK=""
+   w_BJACK="no"
+else
+    AC_CHECK_OCAML_BINDING([bjack])
+fi
 
 #
 # Alsa
 #
 
-AC_CHECK_OCAML_BINDING([alsa])
+AC_ARG_ENABLE([alsa],
+   AS_HELP_STRING([--disable-alsa],[don't use alsa]))
+if test "x$enable_alsa" = "xno" ; then
+   W_ALSA=""
+   w_ALSA="no"
+else
+    AC_CHECK_OCAML_BINDING([alsa])
+fi
 
 #
 # LibAO
 #
 
-AC_CHECK_OCAML_BINDING([ao])
+AC_ARG_ENABLE([ao],
+   AS_HELP_STRING([--disable-ao],[don't use ao]))
+if test "x$enable_ao" = "xno" ; then
+   W_AO=""
+   w_AO="no"
+else
+    AC_CHECK_OCAML_BINDING([ao])
+fi
 
 #
 # Samplerate
 #
 
-AC_CHECK_OCAML_BINDING([samplerate])
+AC_ARG_ENABLE([samplerate],
+   AS_HELP_STRING([--disable-samplerate],[don't use samplerate]))
+if test "x$enable_samplerate" = "xno" ; then
+   W_SAMPLERATE=""
+   w_SAMPLERATE="no"
+else
+    AC_CHECK_OCAML_BINDING([samplerate])
+fi
 
 #
 # Taglib
 #
 
-AC_CHECK_OCAML_BINDING([taglib])
+AC_ARG_ENABLE([taglib],
+   AS_HELP_STRING([--disable-taglib],[don't use taglib]))
+if test "x$enable_taglib" = "xno" ; then
+   W_TAGLIB=""
+   w_TAGLIB="no"
+else
+    AC_CHECK_OCAML_BINDING([taglib])
+fi
 
 #
 # OSS
@@ -637,7 +815,14 @@
 # SSL
 #
 
-AC_CHECK_OCAML_BINDING([ssl])
+AC_ARG_ENABLE([ssl],
+   AS_HELP_STRING([--disable-ssl],[don't use ssl]))
+if test "x$enable_ssl" = "xno" ; then
+   W_SSL=""
+   w_SSL="no"
+else
+    AC_CHECK_OCAML_BINDING([ssl])
+fi
 
 if test "a$W_SSL" = "ayes"; then
     cat >> src/configure.ml <<EOCONF
@@ -651,13 +836,27 @@
 # SecureTransport (OSX)
 #
 
-AC_CHECK_OCAML_BINDING([osx-secure-transport])
+AC_ARG_ENABLE([osx-secure-transport],
+   AS_HELP_STRING([--disable-osx-secure-transport],[don't use osx-secure-transport]))
+if test "x$enable_osx-secure-transport" = "xno" ; then
+   W_OSX_SECURE_TRANSPORT=""
+   w_OSX_SECURE_TRANSPORT="no"
+else
+    AC_CHECK_OCAML_BINDING([osx-secure-transport])
+fi
 
 #
 # Magic
 #
 
-AC_CHECK_OCAML_BINDING([magic])
+AC_ARG_ENABLE([magic],
+   AS_HELP_STRING([--disable-magic],[don't use magic]))
+if test "x$enable_magic" = "xno" ; then
+   W_MAGIC=""
+   w_MAGIC="no"
+else
+    AC_CHECK_OCAML_BINDING([magic])
+fi
 
 if test -z "$W_MAGIC" ; then
     cat >> src/configure.ml <<EOCONF
@@ -692,8 +891,12 @@
 
 AC_ARG_ENABLE([camomile],
   AS_HELP_STRING([--disable-camomile],[don't use camomile (no charset detection and conversion)]))
-
-AC_CHECK_OCAML_BINDING([camomile])
+if test "x$enable_camomile" = "xno" ; then
+   W_CAMOMILE=""
+   w_CAMOMILE="no"
+else
+   AC_CHECK_OCAML_BINDING([camomile])
+fi
 
 AC_ARG_WITH([camomile-data-dir],
    AS_HELP_STRING(
@@ -814,7 +1017,14 @@
 
 # Inotify
 
-AC_CHECK_OCAML_BINDING([inotify])
+AC_ARG_ENABLE([inotify],
+   AS_HELP_STRING([--disable-inotify],[don't use inotify]))
+if test "x$enable_inotify" = "xno" ; then
+   W_INOTIFY=""
+   w_INOTIFY="no"
+else
+    AC_CHECK_OCAML_BINDING([inotify])
+fi
 
 cat >> src/configure.ml <<EOCONF
 let file_watcher = ref File_watcher_mtime.watch
@@ -822,7 +1032,14 @@
 
 # Yojson
 
-AC_CHECK_OCAML_BINDING([yojson])
+AC_ARG_ENABLE([yojson],
+   AS_HELP_STRING([--disable-yojson],[don't use yojson]))
+if test "x$enable_yojson" = "xno" ; then
+   W_YOJSON=""
+   w_YOJSON="no"
+else
+    AC_CHECK_OCAML_BINDING([yojson])
+fi
 
 if test -z "${W_YOJSON}"; then
 cat >> src/configure.ml <<__BLAH__
@@ -836,45 +1053,146 @@
 
 # OCaml bindings
 
-AC_CHECK_OCAML_BINDING([faad])
-AC_CHECK_OCAML_BINDING([soundtouch])
-AC_CHECK_OCAML_BINDING([portaudio])
-AC_CHECK_OCAML_BINDING([pulseaudio])
-AC_CHECK_OCAML_BINDING([ladspa])
-AC_CHECK_OCAML_BINDING([dssi])
-AC_CHECK_OCAML_BINDING([lilv])
-AC_CHECK_OCAML_BINDING([tsdl])
-AC_CHECK_OCAML_BINDING([tsdl-ttf],[tsdl])
-AC_CHECK_OCAML_BINDING([tsdl-image],[tsdl])
-AC_CHECK_OCAML_BINDING([camlimages],[],[],[camlimages.all_formats])
+AC_ARG_ENABLE([faad],
+   AS_HELP_STRING([--disable-faad],[don't use faad]))
+if test "x$enable_faad" = "xno" ; then
+   W_FAAD=""
+   w_FAAD="no"
+else
+    AC_CHECK_OCAML_BINDING([faad])
+fi
+
+AC_ARG_ENABLE([soundtouch],
+   AS_HELP_STRING([--disable-soundtouch],[don't use soundtouch]))
+if test "x$enable_soundtouch" = "xno" ; then
+   W_SOUNDTOUCH=""
+   w_SOUNDTOUCH="no"
+else
+    AC_CHECK_OCAML_BINDING([soundtouch])
+fi
+
+AC_ARG_ENABLE([portaudio],
+   AS_HELP_STRING([--disable-portaudio],[don't use portaudio]))
+if test "x$enable_portaudio" = "xno" ; then
+   W_PORTAUDIO=""
+   w_PORTAUDIO="no"
+else
+    AC_CHECK_OCAML_BINDING([portaudio])
+fi
+
+AC_ARG_ENABLE([pulseaudio],
+   AS_HELP_STRING([--disable-pulseaudio],[don't use pulseaudio]))
+if test "x$enable_pulseaudio" = "xno" ; then
+   W_PULSEAUDIO=""
+   w_PULSEAUDIO="no"
+else
+    AC_CHECK_OCAML_BINDING([pulseaudio])
+fi
+
+AC_ARG_ENABLE([ladspa],
+   AS_HELP_STRING([--disable-ladspa],[don't use ladspa]))
+if test "x$enable_ladspa" = "xno" ; then
+   W_LADSPA=""
+   w_LADSPA="no"
+else
+    AC_CHECK_OCAML_BINDING([ladspa])
+fi
+
+AC_ARG_ENABLE([dssi],
+   AS_HELP_STRING([--disable-dssi],[don't use dssi]))
+if test "x$enable_dssi" = "xno" ; then
+   W_DSSI=""
+   w_DSSI="no"
+else
+    AC_CHECK_OCAML_BINDING([dssi])
+fi
+
+AC_ARG_ENABLE([lilv],
+   AS_HELP_STRING([--disable-lilv],[don't use lilv]))
+if test "x$enable_lilv" = "xno" ; then
+   W_LILV=""
+   w_LILV="no"
+else
+    AC_CHECK_OCAML_BINDING([lilv])
+fi
+
+AC_ARG_ENABLE([tsdl],
+   AS_HELP_STRING([--disable-tsdl],[don't use tsdl]))
+if test "x$enable_tsdl" = "xno" ; then
+   W_TSDL=""
+   w_TSDL="no"
+else
+    AC_CHECK_OCAML_BINDING([tsdl])
+    AC_CHECK_OCAML_BINDING([tsdl-ttf],[tsdl])
+    AC_CHECK_OCAML_BINDING([tsdl-image],[tsdl])
+fi
+
+AC_ARG_ENABLE([camlimages],
+   AS_HELP_STRING([--disable-camlimages],[don't use camlimages]))
+if test "x$enable_camlimages" = "xno" ; then
+   W_CAMLIMAGES=""
+   w_CAMLIMAGES="no"
+else
+    AC_CHECK_OCAML_BINDING([camlimages],[],[],[camlimages.all_formats])
+fi
+
 AC_CHECK_OCAML_BINDING([cohttp-lwt-unix])
 AC_CHECK_OCAML_BINDING([prometheus-app],[cohttp-lwt-unix])
 
 # TODO: switch to dune all the way?
-with_srt_constants_dir=${with_srt_dir}
-liquidsoap_ocamlcflags="${liquidsoap_ocamlcflags} -I ${with_srt_dir}/constants"
-AC_CHECK_OCAML_BINDING([srt.constants],[],[],[],[srt_constants])
-
-with_srt_types_dir=${with_srt_dir}
-liquidsoap_ocamlcflags="${liquidsoap_ocamlcflags} -I ${with_srt_dir}/types"
-AC_CHECK_OCAML_BINDING([srt.types],[],[],[],[srt_types])
-
-with_srt_stubs_dir=${with_srt_dir}
-liquidsoap_ocamlcflags="${liquidsoap_ocamlcflags} -I ${with_srt_dir}/stubs"
-AC_CHECK_OCAML_BINDING([srt.stubs],[srt.types],[],[],[srt_stubs])
-
-with_srt_stubs_locked_dir=${with_srt_dir}
-liquidsoap_ocamlcflags="${liquidsoap_ocamlcflags} -I ${with_srt_dir}/stubs/locked"
-AC_CHECK_OCAML_BINDING([srt.stubs.locked],[],[],[],[srt_stubs_locked])
-
-AC_CHECK_OCAML_BINDING([srt],[srt.constants srt.types srt.stubs srt.stubs.locked])
+AC_ARG_ENABLE([srt],
+   AS_HELP_STRING([--disable-srt],[don't use srt]))
+if test "x$enable_srt" = "xno" ; then
+   W_SRT=""
+   w_SRT="no"
+else
+   with_srt_constants_dir=${with_srt_dir}
+   liquidsoap_ocamlcflags="${liquidsoap_ocamlcflags} -I ${with_srt_dir}/constants"
+   AC_CHECK_OCAML_BINDING([srt.constants],[],[],[],[srt_constants])
+
+   with_srt_types_dir=${with_srt_dir}
+   liquidsoap_ocamlcflags="${liquidsoap_ocamlcflags} -I ${with_srt_dir}/types"
+   AC_CHECK_OCAML_BINDING([srt.types],[],[],[],[srt_types])
+
+   with_srt_stubs_dir=${with_srt_dir}
+   liquidsoap_ocamlcflags="${liquidsoap_ocamlcflags} -I ${with_srt_dir}/stubs"
+   AC_CHECK_OCAML_BINDING([srt.stubs],[srt.types],[],[],[srt_stubs])
+
+   with_srt_stubs_locked_dir=${with_srt_dir}
+   liquidsoap_ocamlcflags="${liquidsoap_ocamlcflags} -I ${with_srt_dir}/stubs/locked"
+   AC_CHECK_OCAML_BINDING([srt.stubs.locked],[],[],[],[srt_stubs_locked])
+
+   AC_CHECK_OCAML_BINDING([srt],[srt.constants srt.types srt.stubs srt.stubs.locked])
+fi
+
+AC_ARG_ENABLE([lo],
+   AS_HELP_STRING([--disable-lo],[don't use lo]))
+if test "x$enable_lo" = "xno" ; then
+   W_LO=""
+   w_LO="no"
+else
+    AC_CHECK_OCAML_BINDING([lo])
+fi
 
-AC_CHECK_OCAML_BINDING([lo])
-AC_CHECK_OCAML_BINDING([gd])
+AC_ARG_ENABLE([gd],
+   AS_HELP_STRING([--disable-gd],[don't use gd]))
+if test "x$enable_gd" = "xno" ; then
+   W_GD=""
+   w_GD="no"
+else
+    AC_CHECK_OCAML_BINDING([gd])
+fi
 
 # Winsvc (to run as a service)
 
-AC_CHECK_OCAML_BINDING([winsvc])
+AC_ARG_ENABLE([winsvc],
+   AS_HELP_STRING([--disable-winsvc],[don't use winsvc]))
+if test "x$enable_winsvc" = "xno" ; then
+   W_WINSVC=""
+   w_WINSVC="no"
+else
+    AC_CHECK_OCAML_BINDING([winsvc])
+fi
 
 #
 # Tuning (See INSTALL to understand these features)
